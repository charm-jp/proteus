// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/charm-jp/proteus/example/protos/github.com/charm-jp/proteus/example/generated.proto

/*
	Package example is a generated protocol buffer package.

	It is generated from these files:
		github.com/charm-jp/proteus/example/protos/github.com/charm-jp/proteus/example/generated.proto

	It has these top-level messages:
		Category
		MyDuration
		MyTime
		Price
		Product
		GetAlphaTimeRequest
		GetDurationForLengthRequest
		GetDurationForLengthCtxRequest
		GetOmegaTimeRequest
		GetPhoneRequest
		RandomCategoryRequest
		RandomNumberRequest
		RandomNumberResponse
*/
package example

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import gopkg_in_srcd_proteus_v1_example_categories "github.com/charm-jp/proteus/example/categories"
import _ "github.com/gogo/protobuf/types"

import time "time"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Type will be transformed into an enum.
var Type_name = map[int32]string{
	0: "PUBLIC",
	1: "PRIVATE",
	2: "CUSTOM",
}
var Type_value = map[string]int32{
	"PUBLIC":  0,
	"PRIVATE": 1,
	"CUSTOM":  2,
}

func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{0} }

func (m *Category) Reset()                    { *m = Category{} }
func (*Category) ProtoMessage()               {}
func (*Category) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{0} }

func (m *MyDuration) Reset()                    { *m = MyDuration{} }
func (m *MyDuration) String() string            { return proto.CompactTextString(m) }
func (*MyDuration) ProtoMessage()               {}
func (*MyDuration) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{1} }

func (m *MyTime) Reset()                    { *m = MyTime{} }
func (m *MyTime) String() string            { return proto.CompactTextString(m) }
func (*MyTime) ProtoMessage()               {}
func (*MyTime) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{2} }

func (m *Price) Reset()                    { *m = Price{} }
func (m *Price) String() string            { return proto.CompactTextString(m) }
func (*Price) ProtoMessage()               {}
func (*Price) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{3} }

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{4} }

type GetAlphaTimeRequest struct {
}

func (m *GetAlphaTimeRequest) Reset()                    { *m = GetAlphaTimeRequest{} }
func (m *GetAlphaTimeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAlphaTimeRequest) ProtoMessage()               {}
func (*GetAlphaTimeRequest) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{5} }

type GetDurationForLengthRequest struct {
	Arg1 int64 `protobuf:"varint,1,opt,name=arg1,proto3" json:"arg1,omitempty"`
}

func (m *GetDurationForLengthRequest) Reset()         { *m = GetDurationForLengthRequest{} }
func (m *GetDurationForLengthRequest) String() string { return proto.CompactTextString(m) }
func (*GetDurationForLengthRequest) ProtoMessage()    {}
func (*GetDurationForLengthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{6}
}

func (m *GetDurationForLengthRequest) GetArg1() int64 {
	if m != nil {
		return m.Arg1
	}
	return 0
}

type GetDurationForLengthCtxRequest struct {
	Arg1 int64 `protobuf:"varint,1,opt,name=arg1,proto3" json:"arg1,omitempty"`
}

func (m *GetDurationForLengthCtxRequest) Reset()         { *m = GetDurationForLengthCtxRequest{} }
func (m *GetDurationForLengthCtxRequest) String() string { return proto.CompactTextString(m) }
func (*GetDurationForLengthCtxRequest) ProtoMessage()    {}
func (*GetDurationForLengthCtxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{7}
}

func (m *GetDurationForLengthCtxRequest) GetArg1() int64 {
	if m != nil {
		return m.Arg1
	}
	return 0
}

type GetOmegaTimeRequest struct {
}

func (m *GetOmegaTimeRequest) Reset()                    { *m = GetOmegaTimeRequest{} }
func (m *GetOmegaTimeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetOmegaTimeRequest) ProtoMessage()               {}
func (*GetOmegaTimeRequest) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{8} }

type GetPhoneRequest struct {
}

func (m *GetPhoneRequest) Reset()                    { *m = GetPhoneRequest{} }
func (m *GetPhoneRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPhoneRequest) ProtoMessage()               {}
func (*GetPhoneRequest) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{9} }

type RandomCategoryRequest struct {
}

func (m *RandomCategoryRequest) Reset()                    { *m = RandomCategoryRequest{} }
func (m *RandomCategoryRequest) String() string            { return proto.CompactTextString(m) }
func (*RandomCategoryRequest) ProtoMessage()               {}
func (*RandomCategoryRequest) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{10} }

type RandomNumberRequest struct {
	Arg1 float64 `protobuf:"fixed64,1,opt,name=arg1,proto3" json:"arg1,omitempty"`
	Arg2 float64 `protobuf:"fixed64,2,opt,name=arg2,proto3" json:"arg2,omitempty"`
}

func (m *RandomNumberRequest) Reset()                    { *m = RandomNumberRequest{} }
func (m *RandomNumberRequest) String() string            { return proto.CompactTextString(m) }
func (*RandomNumberRequest) ProtoMessage()               {}
func (*RandomNumberRequest) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{11} }

func (m *RandomNumberRequest) GetArg1() float64 {
	if m != nil {
		return m.Arg1
	}
	return 0
}

func (m *RandomNumberRequest) GetArg2() float64 {
	if m != nil {
		return m.Arg2
	}
	return 0
}

type RandomNumberResponse struct {
	Result1 float64 `protobuf:"fixed64,1,opt,name=result1,proto3" json:"result1,omitempty"`
}

func (m *RandomNumberResponse) Reset()                    { *m = RandomNumberResponse{} }
func (m *RandomNumberResponse) String() string            { return proto.CompactTextString(m) }
func (*RandomNumberResponse) ProtoMessage()               {}
func (*RandomNumberResponse) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{12} }

func (m *RandomNumberResponse) GetResult1() float64 {
	if m != nil {
		return m.Result1
	}
	return 0
}

func init() {
	proto.RegisterType((*Category)(nil), "gopkg.in.srcd.proteus.v1.example.Category")
	proto.RegisterType((*MyDuration)(nil), "gopkg.in.srcd.proteus.v1.example.MyDuration")
	proto.RegisterType((*MyTime)(nil), "gopkg.in.srcd.proteus.v1.example.MyTime")
	proto.RegisterType((*Price)(nil), "gopkg.in.srcd.proteus.v1.example.Price")
	proto.RegisterType((*Product)(nil), "gopkg.in.srcd.proteus.v1.example.Product")
	proto.RegisterType((*GetAlphaTimeRequest)(nil), "gopkg.in.srcd.proteus.v1.example.GetAlphaTimeRequest")
	proto.RegisterType((*GetDurationForLengthRequest)(nil), "gopkg.in.srcd.proteus.v1.example.GetDurationForLengthRequest")
	proto.RegisterType((*GetDurationForLengthCtxRequest)(nil), "gopkg.in.srcd.proteus.v1.example.GetDurationForLengthCtxRequest")
	proto.RegisterType((*GetOmegaTimeRequest)(nil), "gopkg.in.srcd.proteus.v1.example.GetOmegaTimeRequest")
	proto.RegisterType((*GetPhoneRequest)(nil), "gopkg.in.srcd.proteus.v1.example.GetPhoneRequest")
	proto.RegisterType((*RandomCategoryRequest)(nil), "gopkg.in.srcd.proteus.v1.example.RandomCategoryRequest")
	proto.RegisterType((*RandomNumberRequest)(nil), "gopkg.in.srcd.proteus.v1.example.RandomNumberRequest")
	proto.RegisterType((*RandomNumberResponse)(nil), "gopkg.in.srcd.proteus.v1.example.RandomNumberResponse")
	proto.RegisterEnum("gopkg.in.srcd.proteus.v1.example.Type", Type_name, Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ExampleService service

type ExampleServiceClient interface {
	GetAlphaTime(ctx context.Context, in *GetAlphaTimeRequest, opts ...grpc.CallOption) (*MyTime, error)
	GetDurationForLength(ctx context.Context, in *GetDurationForLengthRequest, opts ...grpc.CallOption) (*MyDuration, error)
	GetDurationForLengthCtx(ctx context.Context, in *GetDurationForLengthCtxRequest, opts ...grpc.CallOption) (*MyDuration, error)
	GetOmegaTime(ctx context.Context, in *GetOmegaTimeRequest, opts ...grpc.CallOption) (*MyTime, error)
	GetPhone(ctx context.Context, in *GetPhoneRequest, opts ...grpc.CallOption) (*Product, error)
	RandomCategory(ctx context.Context, in *RandomCategoryRequest, opts ...grpc.CallOption) (*gopkg_in_srcd_proteus_v1_example_categories.CategoryOptions, error)
	RandomNumber(ctx context.Context, in *RandomNumberRequest, opts ...grpc.CallOption) (*RandomNumberResponse, error)
}

type exampleServiceClient struct {
	cc *grpc.ClientConn
}

func NewExampleServiceClient(cc *grpc.ClientConn) ExampleServiceClient {
	return &exampleServiceClient{cc}
}

func (c *exampleServiceClient) GetAlphaTime(ctx context.Context, in *GetAlphaTimeRequest, opts ...grpc.CallOption) (*MyTime, error) {
	out := new(MyTime)
	err := grpc.Invoke(ctx, "/gopkg.in.srcd.proteus.v1.example.ExampleService/GetAlphaTime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) GetDurationForLength(ctx context.Context, in *GetDurationForLengthRequest, opts ...grpc.CallOption) (*MyDuration, error) {
	out := new(MyDuration)
	err := grpc.Invoke(ctx, "/gopkg.in.srcd.proteus.v1.example.ExampleService/GetDurationForLength", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) GetDurationForLengthCtx(ctx context.Context, in *GetDurationForLengthCtxRequest, opts ...grpc.CallOption) (*MyDuration, error) {
	out := new(MyDuration)
	err := grpc.Invoke(ctx, "/gopkg.in.srcd.proteus.v1.example.ExampleService/GetDurationForLengthCtx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) GetOmegaTime(ctx context.Context, in *GetOmegaTimeRequest, opts ...grpc.CallOption) (*MyTime, error) {
	out := new(MyTime)
	err := grpc.Invoke(ctx, "/gopkg.in.srcd.proteus.v1.example.ExampleService/GetOmegaTime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) GetPhone(ctx context.Context, in *GetPhoneRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := grpc.Invoke(ctx, "/gopkg.in.srcd.proteus.v1.example.ExampleService/GetPhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) RandomCategory(ctx context.Context, in *RandomCategoryRequest, opts ...grpc.CallOption) (*gopkg_in_srcd_proteus_v1_example_categories.CategoryOptions, error) {
	out := new(gopkg_in_srcd_proteus_v1_example_categories.CategoryOptions)
	err := grpc.Invoke(ctx, "/gopkg.in.srcd.proteus.v1.example.ExampleService/RandomCategory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) RandomNumber(ctx context.Context, in *RandomNumberRequest, opts ...grpc.CallOption) (*RandomNumberResponse, error) {
	out := new(RandomNumberResponse)
	err := grpc.Invoke(ctx, "/gopkg.in.srcd.proteus.v1.example.ExampleService/RandomNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExampleService service

type ExampleServiceServer interface {
	GetAlphaTime(context.Context, *GetAlphaTimeRequest) (*MyTime, error)
	GetDurationForLength(context.Context, *GetDurationForLengthRequest) (*MyDuration, error)
	GetDurationForLengthCtx(context.Context, *GetDurationForLengthCtxRequest) (*MyDuration, error)
	GetOmegaTime(context.Context, *GetOmegaTimeRequest) (*MyTime, error)
	GetPhone(context.Context, *GetPhoneRequest) (*Product, error)
	RandomCategory(context.Context, *RandomCategoryRequest) (*gopkg_in_srcd_proteus_v1_example_categories.CategoryOptions, error)
	RandomNumber(context.Context, *RandomNumberRequest) (*RandomNumberResponse, error)
}

func RegisterExampleServiceServer(s *grpc.Server, srv ExampleServiceServer) {
	s.RegisterService(&_ExampleService_serviceDesc, srv)
}

func _ExampleService_GetAlphaTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlphaTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).GetAlphaTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopkg.in.srcd.proteus.v1.example.ExampleService/GetAlphaTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).GetAlphaTime(ctx, req.(*GetAlphaTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_GetDurationForLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDurationForLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).GetDurationForLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopkg.in.srcd.proteus.v1.example.ExampleService/GetDurationForLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).GetDurationForLength(ctx, req.(*GetDurationForLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_GetDurationForLengthCtx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDurationForLengthCtxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).GetDurationForLengthCtx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopkg.in.srcd.proteus.v1.example.ExampleService/GetDurationForLengthCtx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).GetDurationForLengthCtx(ctx, req.(*GetDurationForLengthCtxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_GetOmegaTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOmegaTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).GetOmegaTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopkg.in.srcd.proteus.v1.example.ExampleService/GetOmegaTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).GetOmegaTime(ctx, req.(*GetOmegaTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_GetPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).GetPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopkg.in.srcd.proteus.v1.example.ExampleService/GetPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).GetPhone(ctx, req.(*GetPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_RandomCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).RandomCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopkg.in.srcd.proteus.v1.example.ExampleService/RandomCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).RandomCategory(ctx, req.(*RandomCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_RandomNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).RandomNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopkg.in.srcd.proteus.v1.example.ExampleService/RandomNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).RandomNumber(ctx, req.(*RandomNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExampleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gopkg.in.srcd.proteus.v1.example.ExampleService",
	HandlerType: (*ExampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAlphaTime",
			Handler:    _ExampleService_GetAlphaTime_Handler,
		},
		{
			MethodName: "GetDurationForLength",
			Handler:    _ExampleService_GetDurationForLength_Handler,
		},
		{
			MethodName: "GetDurationForLengthCtx",
			Handler:    _ExampleService_GetDurationForLengthCtx_Handler,
		},
		{
			MethodName: "GetOmegaTime",
			Handler:    _ExampleService_GetOmegaTime_Handler,
		},
		{
			MethodName: "GetPhone",
			Handler:    _ExampleService_GetPhone_Handler,
		},
		{
			MethodName: "RandomCategory",
			Handler:    _ExampleService_RandomCategory_Handler,
		},
		{
			MethodName: "RandomNumber",
			Handler:    _ExampleService_RandomNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/charm-jp/proteus/example/protos/github.com/charm-jp/proteus/example/generated.proto",
}

func (m *Category) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Category) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.ID))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.DeletedAt)))
	n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.DeletedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Type != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Type))
	}
	if len(m.Color) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Color)))
		i += copy(dAtA[i:], m.Color)
	}
	dAtA[i] = 0x42
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Options.ProtoSize()))
	n4, err := m.Options.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *MyDuration) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyDuration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration)))
	n5, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Duration, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *MyTime) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyTime) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)))
	n6, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Time, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Price) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Price) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Currency) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Currency)))
		i += copy(dAtA[i:], m.Currency)
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *Product) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Product) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.ID))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n7, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n8, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.DeletedAt)))
	n9, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.DeletedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Price) > 0 {
		for k, _ := range m.Price {
			dAtA[i] = 0x32
			i++
			v := m.Price[k]
			msgSize := 0
			if (&v) != nil {
				msgSize = (&v).ProtoSize()
				msgSize += 1 + sovGenerated(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovGenerated(uint64(len(k))) + msgSize
			i = encodeVarintGenerated(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64((&v).ProtoSize()))
			n10, err := (&v).MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n10
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.CategoryID != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.CategoryID))
	}
	if m.PrimaryCategoryID != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.PrimaryCategoryID))
	}
	return i, nil
}

func (m *GetAlphaTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAlphaTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetDurationForLengthRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDurationForLengthRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Arg1 != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Arg1))
	}
	return i, nil
}

func (m *GetDurationForLengthCtxRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDurationForLengthCtxRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Arg1 != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Arg1))
	}
	return i, nil
}

func (m *GetOmegaTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOmegaTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetPhoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPhoneRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RandomCategoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandomCategoryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RandomNumberRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandomNumberRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Arg1 != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Generated(dAtA, i, uint64(math.Float64bits(float64(m.Arg1))))
	}
	if m.Arg2 != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Generated(dAtA, i, uint64(math.Float64bits(float64(m.Arg2))))
	}
	return i, nil
}

func (m *RandomNumberResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandomNumberResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result1 != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Generated(dAtA, i, uint64(math.Float64bits(float64(m.Result1))))
	}
	return i, nil
}

func encodeFixed64Generated(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Generated(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Category) ProtoSize() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovGenerated(uint64(m.ID))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovGenerated(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovGenerated(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.DeletedAt)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovGenerated(uint64(m.Type))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.Options.ProtoSize()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *MyDuration) ProtoSize() (n int) {
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *MyTime) ProtoSize() (n int) {
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *Price) ProtoSize() (n int) {
	var l int
	_ = l
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovGenerated(uint64(m.Amount))
	}
	return n
}

func (m *Product) ProtoSize() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovGenerated(uint64(m.ID))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovGenerated(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovGenerated(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.DeletedAt)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Price) > 0 {
		for k, v := range m.Price {
			_ = k
			_ = v
			l = v.ProtoSize()
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + l + sovGenerated(uint64(l))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.CategoryID != 0 {
		n += 1 + sovGenerated(uint64(m.CategoryID))
	}
	if m.PrimaryCategoryID != 0 {
		n += 1 + sovGenerated(uint64(m.PrimaryCategoryID))
	}
	return n
}

func (m *GetAlphaTimeRequest) ProtoSize() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetDurationForLengthRequest) ProtoSize() (n int) {
	var l int
	_ = l
	if m.Arg1 != 0 {
		n += 1 + sovGenerated(uint64(m.Arg1))
	}
	return n
}

func (m *GetDurationForLengthCtxRequest) ProtoSize() (n int) {
	var l int
	_ = l
	if m.Arg1 != 0 {
		n += 1 + sovGenerated(uint64(m.Arg1))
	}
	return n
}

func (m *GetOmegaTimeRequest) ProtoSize() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetPhoneRequest) ProtoSize() (n int) {
	var l int
	_ = l
	return n
}

func (m *RandomCategoryRequest) ProtoSize() (n int) {
	var l int
	_ = l
	return n
}

func (m *RandomNumberRequest) ProtoSize() (n int) {
	var l int
	_ = l
	if m.Arg1 != 0 {
		n += 9
	}
	if m.Arg2 != 0 {
		n += 9
	}
	return n
}

func (m *RandomNumberResponse) ProtoSize() (n int) {
	var l int
	_ = l
	if m.Result1 != 0 {
		n += 9
	}
	return n
}

func sovGenerated(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Category) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Category: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Category: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.DeletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = Color(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyDuration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyDuration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyDuration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Price) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Price: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Price: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Product) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Product: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Product: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.DeletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthGenerated
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Price == nil {
				m.Price = make(Prices)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthGenerated
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthGenerated
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &Price{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Price[mapkey] = *mapvalue
			} else {
				var mapvalue Price
				m.Price[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryID", wireType)
			}
			m.CategoryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryCategoryID", wireType)
			}
			m.PrimaryCategoryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryCategoryID |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAlphaTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAlphaTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAlphaTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDurationForLengthRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDurationForLengthRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDurationForLengthRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg1", wireType)
			}
			m.Arg1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arg1 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDurationForLengthCtxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDurationForLengthCtxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDurationForLengthCtxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg1", wireType)
			}
			m.Arg1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arg1 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOmegaTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOmegaTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOmegaTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPhoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPhoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPhoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandomCategoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RandomCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RandomCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandomNumberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RandomNumberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RandomNumberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Arg1 = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg2", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Arg2 = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandomNumberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RandomNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RandomNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Result1 = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGenerated(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGenerated = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/charm-jp/proteus/example/protos/github.com/charm-jp/proteus/example/generated.proto", fileDescriptorGenerated)
}

var fileDescriptorGenerated = []byte{
	// 1033 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x56, 0x4f, 0x6f, 0xe3, 0xc4,
	0x1b, 0xb6, 0xf3, 0xbf, 0x6f, 0xab, 0xfe, 0xda, 0xe9, 0xfe, 0xc9, 0xcf, 0x68, 0x6d, 0xab, 0x07,
	0x08, 0x88, 0x75, 0x68, 0x58, 0xa0, 0xaa, 0xb6, 0x82, 0x26, 0x2d, 0x55, 0xa5, 0x2d, 0x8d, 0xbc,
	0x5d, 0x0e, 0x15, 0xa2, 0xb8, 0xf6, 0xe0, 0x5a, 0x8d, 0x3d, 0x66, 0x3c, 0xae, 0x36, 0x07, 0x4e,
	0x1c, 0x28, 0x7b, 0xe2, 0xd8, 0xcb, 0x4a, 0x45, 0xec, 0x81, 0x8f, 0xc1, 0x71, 0x4f, 0x88, 0x4f,
	0x10, 0x20, 0xfb, 0x05, 0xb8, 0x21, 0xf5, 0x84, 0xc6, 0x63, 0xa7, 0x69, 0xc9, 0x92, 0x14, 0x8e,
	0xdc, 0x66, 0xde, 0x99, 0xe7, 0x79, 0xdf, 0xbc, 0xcf, 0xf3, 0x8e, 0x03, 0x7b, 0x2e, 0x09, 0x8f,
	0x5c, 0xc3, 0x0b, 0xea, 0x11, 0xb5, 0xef, 0x3a, 0xf5, 0x90, 0x12, 0x86, 0xe3, 0xc8, 0x38, 0x5e,
	0xaa, 0xe3, 0xc7, 0x96, 0x1f, 0x76, 0x70, 0x12, 0x22, 0x51, 0x7d, 0xfc, 0x45, 0x17, 0x07, 0x98,
	0x5a, 0x0c, 0x3b, 0x46, 0x02, 0x41, 0x7a, 0x06, 0x31, 0x22, 0x6a, 0x8b, 0xa0, 0x40, 0x18, 0x29,
	0x42, 0xb9, 0xeb, 0x7a, 0xec, 0x30, 0x3e, 0x30, 0x6c, 0xe2, 0xd7, 0x5d, 0xe2, 0x12, 0x91, 0xeb,
	0x20, 0xfe, 0x3c, 0xd9, 0x25, 0x9b, 0x64, 0x25, 0x08, 0x15, 0xcd, 0x25, 0xc4, 0xcd, 0x2a, 0xe2,
	0xb7, 0x98, 0xe7, 0xe3, 0x88, 0x59, 0x7e, 0x98, 0x5e, 0xb8, 0x3f, 0xbe, 0x48, 0xdb, 0x62, 0xd8,
	0x25, 0xd4, 0xc3, 0xd1, 0xd5, 0x7a, 0x15, 0xf5, 0x2a, 0xbd, 0x13, 0x53, 0x8b, 0x79, 0x24, 0x10,
	0xe7, 0x8b, 0x3f, 0xe5, 0xa1, 0xd2, 0x12, 0xf0, 0x2e, 0xba, 0x05, 0x39, 0xcf, 0xa9, 0xca, 0xba,
	0x5c, 0xcb, 0x37, 0x4b, 0xfd, 0x9e, 0x96, 0xdb, 0x5a, 0x37, 0x73, 0x9e, 0x83, 0x5a, 0x00, 0x36,
	0xc5, 0x9c, 0x75, 0xdf, 0x62, 0xd5, 0x9c, 0x2e, 0xd7, 0xa6, 0x1b, 0x8a, 0x21, 0x98, 0x8d, 0x8c,
	0xd9, 0xd8, 0xcd, 0x0a, 0x6f, 0x56, 0x9e, 0xf7, 0x34, 0xe9, 0xdb, 0x5f, 0x34, 0xd9, 0x9c, 0x4a,
	0x71, 0x6b, 0x8c, 0x93, 0xc4, 0xa1, 0x93, 0x91, 0xe4, 0xaf, 0x43, 0x92, 0xe2, 0x04, 0x89, 0x83,
	0x3b, 0x38, 0x25, 0x29, 0x5c, 0x87, 0x24, 0xc5, 0xad, 0x31, 0x84, 0xa0, 0x10, 0x58, 0x3e, 0xae,
	0x16, 0x75, 0xb9, 0x36, 0x65, 0x26, 0x6b, 0xb4, 0x02, 0x05, 0xd6, 0x0d, 0x71, 0xb5, 0xa4, 0xcb,
	0xb5, 0xd9, 0xc6, 0xab, 0xc6, 0x38, 0x99, 0x8d, 0xdd, 0x6e, 0x88, 0xcd, 0x04, 0x83, 0x34, 0x28,
	0xda, 0xa4, 0x43, 0x68, 0xb5, 0xcc, 0x09, 0x9b, 0x53, 0xe7, 0x3d, 0xad, 0xd8, 0xe2, 0x01, 0x53,
	0xc4, 0xd1, 0x27, 0x50, 0x26, 0x21, 0x6f, 0x7a, 0x54, 0xad, 0x24, 0x25, 0xdf, 0x1f, 0xcf, 0x7f,
	0xa1, 0xa9, 0x91, 0xe9, 0xb3, 0x23, 0x38, 0x9a, 0x05, 0xfe, 0xa3, 0xcc, 0x8c, 0x72, 0x65, 0xe6,
	0xe4, 0x4c, 0x93, 0x4e, 0xcf, 0x34, 0xe9, 0xf7, 0xef, 0x34, 0x69, 0xf1, 0x08, 0x60, 0xbb, 0xbb,
	0x9e, 0x8a, 0x8c, 0xde, 0x87, 0x4a, 0x26, 0x78, 0xa2, 0xeb, 0x74, 0xe3, 0xff, 0x7f, 0xe9, 0x56,
	0x76, 0x59, 0x34, 0xeb, 0x94, 0x37, 0x6b, 0x00, 0x1a, 0xf4, 0x2a, 0x77, 0xd1, 0xab, 0x95, 0xca,
	0x49, 0x96, 0xec, 0x33, 0x28, 0x6d, 0x77, 0x79, 0xb7, 0xd1, 0x32, 0x14, 0xb8, 0x71, 0xd3, 0x24,
	0x93, 0x49, 0x92, 0x20, 0xc6, 0x64, 0xd8, 0x80, 0x62, 0x9b, 0x7a, 0x36, 0x46, 0x0a, 0x54, 0xec,
	0x98, 0x52, 0x1c, 0xd8, 0xdd, 0x24, 0xc9, 0x94, 0x39, 0xd8, 0xa3, 0x5b, 0x50, 0xb2, 0x7c, 0x12,
	0x07, 0xc2, 0x9b, 0x79, 0x33, 0xdd, 0x0d, 0xd1, 0xfc, 0x56, 0x80, 0x72, 0x9b, 0x12, 0x27, 0xb6,
	0xd9, 0x7f, 0xd9, 0xe5, 0x7b, 0x50, 0x0c, 0x79, 0x37, 0xab, 0x25, 0x3d, 0x5f, 0x9b, 0x6e, 0xdc,
	0x1b, 0x6f, 0xc3, 0xb4, 0x69, 0x46, 0x22, 0xc2, 0x46, 0xc0, 0x68, 0xb7, 0x39, 0xcb, 0xb3, 0x9d,
	0xf7, 0xb4, 0x52, 0x12, 0x8b, 0x4c, 0x41, 0xc9, 0xf3, 0x31, 0xcb, 0x8d, 0xaa, 0x65, 0x3d, 0xcf,
	0xf3, 0xf1, 0x35, 0xaa, 0xc3, 0x74, 0xea, 0xe3, 0xee, 0xbe, 0xe7, 0x24, 0xe6, 0xcf, 0x37, 0x67,
	0xfb, 0x3d, 0x0d, 0x32, 0x4f, 0x6f, 0xad, 0x9b, 0x90, 0x5d, 0xd9, 0x72, 0xd0, 0x36, 0x2c, 0x84,
	0xd4, 0xf3, 0x2d, 0xda, 0xdd, 0x1f, 0x06, 0x4e, 0xe9, 0x72, 0xad, 0xd8, 0xbc, 0xd3, 0xef, 0x69,
	0xf3, 0x6d, 0x71, 0x7c, 0x81, 0x3f, 0xef, 0x69, 0x05, 0x2f, 0x60, 0xcb, 0xe6, 0x7c, 0x78, 0xe5,
	0xc8, 0x51, 0x2c, 0x80, 0x8b, 0xc2, 0xd1, 0x1c, 0xe4, 0x8f, 0x70, 0xe6, 0x1e, 0xbe, 0x44, 0xab,
	0x50, 0x3c, 0xb6, 0x3a, 0x31, 0x4e, 0xd5, 0x7e, 0x6d, 0x92, 0x7e, 0x78, 0x36, 0x36, 0x05, 0x6a,
	0x25, 0xb7, 0x2c, 0x0f, 0x79, 0xec, 0x26, 0x2c, 0x6c, 0x62, 0xb6, 0xd6, 0x09, 0x0f, 0x2d, 0x2e,
	0x8d, 0x89, 0xbf, 0x88, 0x71, 0xc4, 0x16, 0x97, 0xe0, 0x95, 0x4d, 0xcc, 0xb2, 0x21, 0xfb, 0x90,
	0xd0, 0x07, 0x38, 0x70, 0xd9, 0x61, 0x7a, 0xcc, 0xdb, 0x66, 0x51, 0x77, 0x49, 0xf8, 0xd1, 0x4c,
	0xd6, 0x8b, 0xf7, 0x40, 0x1d, 0x05, 0x69, 0xb1, 0xc7, 0x7f, 0x87, 0x12, 0xf9, 0x77, 0x7c, 0xec,
	0x5e, 0xca, 0x3f, 0x0f, 0xff, 0xdb, 0xc4, 0xac, 0x7d, 0x48, 0x82, 0x41, 0xe8, 0x36, 0xdc, 0x34,
	0xad, 0xc0, 0x21, 0x7e, 0xd6, 0xaa, 0xec, 0x60, 0x15, 0x16, 0xc4, 0xc1, 0x47, 0xb1, 0x7f, 0x80,
	0xe9, 0xa8, 0x6c, 0xb2, 0xc8, 0x96, 0xc6, 0x1a, 0x49, 0xe7, 0x44, 0xac, 0xb1, 0xf8, 0x16, 0xdc,
	0xb8, 0x0c, 0x8f, 0x42, 0x12, 0x44, 0x18, 0x55, 0xa1, 0x4c, 0x71, 0x14, 0x77, 0x58, 0x46, 0x91,
	0x6d, 0xdf, 0xf8, 0x14, 0x0a, 0xfc, 0x21, 0xe5, 0x13, 0xdc, 0x7e, 0xd4, 0x7c, 0xb0, 0xd5, 0x9a,
	0x93, 0x14, 0x78, 0xf2, 0x54, 0x2f, 0xb5, 0xe3, 0x83, 0x8e, 0x67, 0x73, 0x64, 0xdb, 0xdc, 0xfa,
	0x78, 0x6d, 0x77, 0x63, 0x4e, 0x56, 0xa6, 0x9f, 0x3c, 0xd5, 0xcb, 0x6d, 0xea, 0x1d, 0x5b, 0x2c,
	0x41, 0xb4, 0x1e, 0x3d, 0xdc, 0xdd, 0xd9, 0x9e, 0xcb, 0x09, 0x44, 0x2b, 0x8e, 0x18, 0xf1, 0x95,
	0x99, 0x93, 0xef, 0x55, 0xe9, 0x87, 0x67, 0xaa, 0xf4, 0xe3, 0x33, 0x55, 0x6a, 0xfc, 0x51, 0x82,
	0xd9, 0x0d, 0x21, 0xdd, 0x43, 0x4c, 0x8f, 0xb9, 0x4f, 0x09, 0xcc, 0x0c, 0xcb, 0x84, 0xde, 0x19,
	0x2f, 0xfa, 0x08, 0x59, 0x95, 0xda, 0x78, 0x58, 0xfa, 0x34, 0x7e, 0x25, 0xc3, 0x8d, 0x51, 0x72,
	0xa2, 0xd5, 0x89, 0x32, 0xbf, 0xcc, 0x39, 0xca, 0x9b, 0x93, 0x54, 0x30, 0xf8, 0x12, 0x7c, 0x23,
	0xc3, 0xed, 0x97, 0x98, 0x0a, 0x7d, 0xf0, 0xcf, 0x0a, 0xb9, 0xf0, 0xe3, 0x35, 0x6b, 0x11, 0x12,
	0x0c, 0x9c, 0x3a, 0xa1, 0x04, 0x57, 0x9d, 0x7d, 0x0d, 0x09, 0x0e, 0xa1, 0x92, 0xcd, 0x00, 0x5a,
	0x9a, 0x28, 0xd9, 0xf0, 0xbc, 0x28, 0xaf, 0x4f, 0xfc, 0x4e, 0xa2, 0xaf, 0x65, 0x98, 0xbd, 0x3c,
	0x5b, 0xe8, 0xbd, 0xf1, 0xe8, 0x91, 0xd3, 0xa8, 0xfc, 0xab, 0x7f, 0x09, 0xe8, 0x4b, 0x98, 0x19,
	0x1e, 0xc6, 0x49, 0x9a, 0x3c, 0x62, 0xf6, 0x95, 0x77, 0xaf, 0x0b, 0x13, 0x33, 0xdf, 0xbc, 0xf3,
	0xbc, 0xaf, 0xca, 0x3f, 0xf7, 0x55, 0xf9, 0xd7, 0xbe, 0x2a, 0x9d, 0xbe, 0x50, 0xa5, 0xb3, 0x17,
	0xaa, 0xbc, 0x57, 0x4e, 0x31, 0x07, 0xa5, 0xe4, 0x33, 0xf6, 0xf6, 0x9f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x0c, 0xf3, 0x59, 0xff, 0xac, 0x0b, 0x00, 0x00,
}
